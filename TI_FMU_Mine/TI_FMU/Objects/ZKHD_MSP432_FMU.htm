<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\ZKHD_MSP432_FMU.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\ZKHD_MSP432_FMU.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Fri Aug 02 14:13:24 2019
<BR><P>
<H3>Maximum Stack Usage =        408 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; Hadrware_Init &rArr; SPL06Init &rArr; UpdateSPL06Info &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">NMI_Handler</a><BR>
 <LI><a href="#[4]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">MemManage_Handler</a><BR>
 <LI><a href="#[5]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">BusFault_Handler</a><BR>
 <LI><a href="#[6]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">UsageFault_Handler</a><BR>
 <LI><a href="#[8]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">DebugMon_Handler</a><BR>
 <LI><a href="#[23]">ADC14_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">ADC14_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[23]">ADC14_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[27]">AES256_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[5]">BusFault_Handler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[11]">COMP_E0_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[12]">COMP_E1_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[c]">CS_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[29]">DMA_ERR_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[2d]">DMA_INT0_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[2c]">DMA_INT1_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[2b]">DMA_INT2_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[2a]">DMA_INT3_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[8]">DebugMon_Handler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[1b]">EUSCIA0_IRQHandler</a> from hardware_uart.o(i.EUSCIA0_IRQHandler) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[1c]">EUSCIA1_IRQHandler</a> from hardware_uart.o(i.EUSCIA1_IRQHandler) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[1d]">EUSCIA2_IRQHandler</a> from hardware_uart.o(i.EUSCIA2_IRQHandler) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[1e]">EUSCIA3_IRQHandler</a> from hardware_uart.o(i.EUSCIA3_IRQHandler) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[1f]">EUSCIB0_IRQHandler</a> from msp432_interrupt.o(i.EUSCIB0_IRQHandler) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[20]">EUSCIB1_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[21]">EUSCIB2_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[22]">EUSCIB3_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[10]">FLCTL_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[f]">FPU_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[3]">HardFault_Handler</a> from msp432_interrupt.o(i.HardFault_Handler) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[4]">MemManage_Handler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[2]">NMI_Handler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[d]">PCM_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[2e]">PORT1_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[2f]">PORT2_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[30]">PORT3_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[31]">PORT4_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[32]">PORT5_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[33]">PORT6_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[b]">PSS_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from msp432_interrupt.o(i.PendSV_Handler) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[28]">RTC_C_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[1]">Reset_Handler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[79]">SPL06Init</a> from spl06.o(i.SPL06Init) referenced from spl06.o(i.SPL06Init)
 <LI><a href="#[37]">SPL06Update</a> from spl06.o(i.SPL06Update) referenced from spl06.o(i.SPL06Init)
 <LI><a href="#[7]">SVC_Handler</a> from msp432_interrupt.o(i.SVC_Handler) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from timer_drv.o(i.SysTick_Handler) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[35]">SystemInit</a> from system_msp432p401r.o(i.SystemInit) referenced from startup_msp432p401r_uvision.o(.text)
 <LI><a href="#[24]">T32_INT1_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[25]">T32_INT2_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[26]">T32_INTC_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[13]">TA0_0_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[14]">TA0_N_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[15]">TA1_0_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[16]">TA1_N_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[17]">TA2_0_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[18]">TA2_N_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[19]">TA3_0_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[1a]">TA3_N_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[38]">UART_A0_ReceiveHandle</a> from hardware_uart.o(i.UART_A0_ReceiveHandle) referenced from hardware_uart.o(i.USART_Init)
 <LI><a href="#[39]">UART_A1_ReceiveHandle</a> from hardware_uart.o(i.UART_A1_ReceiveHandle) referenced from hardware_uart.o(i.USART_Init)
 <LI><a href="#[3a]">UART_A2_ReceiveHandle</a> from hardware_uart.o(i.UART_A2_ReceiveHandle) referenced from hardware_uart.o(i.USART_Init)
 <LI><a href="#[3b]">UART_A3_ReceiveHandle</a> from hardware_uart.o(i.UART_A3_ReceiveHandle) referenced from hardware_uart.o(i.USART_Init)
 <LI><a href="#[6]">UsageFault_Handler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[e]">WDT_A_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[36]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_msp432p401r_uvision.o(.text)
 <LI><a href="#[3c]">_sputc</a> from printf6.o(i._sputc) referenced from printf6.o(i.__0sprintf$6)
 <LI><a href="#[34]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[36]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(.text)
</UL>
<P><STRONG><a name="[d9]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[3d]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[51]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[da]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[db]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[dc]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[dd]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[de]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[1]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>ADC14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC14_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC14_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>AES256_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>COMP_E0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>COMP_E1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>CS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA_INT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA_INT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA_INT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA_INT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EUSCIB1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EUSCIB2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EUSCIB3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>FLCTL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>PCM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>PORT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>PORT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>PORT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>PORT4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>PORT5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>PORT6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PSS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>RTC_C_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>T32_INT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>T32_INT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>T32_INTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TA0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TA0_N_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TA1_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TA1_N_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TA2_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TA2_N_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TA3_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TA3_N_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>WDT_A_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enQueue
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deQueue
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyRC
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_A2_ReceiveHandle
</UL>

<P><STRONG><a name="[b1]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[df]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[e0]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[e1]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3f]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[73]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMPU6050Offset
</UL>

<P><STRONG><a name="[e2]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[42]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyRC
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>

<P><STRONG><a name="[47]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateSPL06Info
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[48]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[49]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyRC
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAngle
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateSPL06Info
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
</UL>

<P><STRONG><a name="[4a]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateSPL06Info
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>

<P><STRONG><a name="[4b]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[4c]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyRC
</UL>

<P><STRONG><a name="[4d]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyRC
</UL>

<P><STRONG><a name="[6e]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAngle
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateSPL06Info
</UL>

<P><STRONG><a name="[4f]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAngle
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateSPL06Info
</UL>

<P><STRONG><a name="[e3]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[d6]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[43]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[e4]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[e5]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[44]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[e6]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[e7]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[50]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[e8]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[46]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[45]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[d4]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[e9]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[3e]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[ea]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[eb]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>__decompress0</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>ALT_Ctrl</STRONG> (Thumb, 1258 bytes, Stack size 0 bytes, height_control.o(i.ALT_Ctrl))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KernelPolling
</UL>

<P><STRONG><a name="[54]"></a>ANO_DT_ParUsedToParList</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, ano_dt.o(i.ANO_DT_ParUsedToParList))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_SendParame
</UL>

<P><STRONG><a name="[53]"></a>ANO_DT_SendParame</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, ano_dt.o(i.ANO_DT_SendParame))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ANO_DT_SendParame
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_Data
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_ParUsedToParList
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_A1_ReceiveHandle
</UL>

<P><STRONG><a name="[55]"></a>ANO_DT_Send_Data</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ano_dt.o(i.ANO_DT_Send_Data))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_SendParame
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_Status
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_Senser
</UL>

<P><STRONG><a name="[56]"></a>ANO_DT_Send_Senser</STRONG> (Thumb, 442 bytes, Stack size 40 bytes, ano_dt.o(i.ANO_DT_Send_Senser))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ANO_DT_Send_Senser
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollingGCS
</UL>

<P><STRONG><a name="[57]"></a>ANO_DT_Send_Status</STRONG> (Thumb, 314 bytes, Stack size 28 bytes, ano_dt.o(i.ANO_DT_Send_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ANO_DT_Send_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollingGCS
</UL>

<P><STRONG><a name="[58]"></a>ATT_Update</STRONG> (Thumb, 1158 bytes, Stack size 96 bytes, imu.o(i.ATT_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ATT_Update
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_rsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KernelPolling
</UL>

<P><STRONG><a name="[bd]"></a>ActionFormChange</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, task_base.o(i.ActionFormChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ActionFormChange
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateStatus
</UL>

<P><STRONG><a name="[bc]"></a>ActionHoldPoint</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, task_base.o(i.ActionHoldPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ActionHoldPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateStatus
</UL>

<P><STRONG><a name="[be]"></a>ActionHoldPoint_Back</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, task_base.o(i.ActionHoldPoint_Back))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ActionHoldPoint_Back
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateStatus
</UL>

<P><STRONG><a name="[bb]"></a>ActionHoldPoint_NoJudge</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, task_base.o(i.ActionHoldPoint_NoJudge))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ActionHoldPoint_NoJudge
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateStatus
</UL>

<P><STRONG><a name="[5a]"></a>AnalyRC</STRONG> (Thumb, 796 bytes, Stack size 32 bytes, remote.o(i.AnalyRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = AnalyRC &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCReceiveHandle
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_A2_ReceiveHandle
</UL>

<P><STRONG><a name="[5f]"></a>AnoOF_DataAnl</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, ano_of.o(i.AnoOF_DataAnl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AnoOF_DataAnl
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnoOF_State_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnoOF_GetOneByte
</UL>

<P><STRONG><a name="[60]"></a>AnoOF_GetOneByte</STRONG> (Thumb, 238 bytes, Stack size 8 bytes, ano_of.o(i.AnoOF_GetOneByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AnoOF_GetOneByte &rArr; AnoOF_DataAnl
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnoOF_DataAnl
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EUSCIA0_IRQHandler
</UL>

<P><STRONG><a name="[61]"></a>AnoOF_State_Task</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ano_of.o(i.AnoOF_State_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AnoOF_State_Task &rArr; AnoOF_Check
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnoOF_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KernelPolling
</UL>

<P><STRONG><a name="[76]"></a>BEEPInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, init.o(i.BEEPInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BEEPInit
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hadrware_Init
</UL>

<P><STRONG><a name="[62]"></a>ClacCascadePID</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, pid.o(i.ClacCascadePID))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ClacCascadePID
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdatePID
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlightPidControl
</UL>

<P><STRONG><a name="[64]"></a>Delay_ms</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, timer_drv.o(i.Delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Delay_ms &rArr; Delay_us &rArr; GetSysTime_us
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050Init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMPU6050Offset
</UL>

<P><STRONG><a name="[65]"></a>Delay_us</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, timer_drv.o(i.Delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Delay_us &rArr; GetSysTime_us
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTime_us
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>

<P><STRONG><a name="[1b]"></a>EUSCIA0_IRQHandler</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, hardware_uart.o(i.EUSCIA0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EUSCIA0_IRQHandler &rArr; AnoOF_GetOneByte &rArr; AnoOF_DataAnl
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_transmitData
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_clearInterruptFlag
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnoOF_GetOneByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EUSCIA1_IRQHandler</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, hardware_uart.o(i.EUSCIA1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EUSCIA1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_transmitData
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_clearInterruptFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EUSCIA2_IRQHandler</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, hardware_uart.o(i.EUSCIA2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = EUSCIA2_IRQHandler &rArr; UART_A2_ReceiveHandle &rArr; AnalyRC &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_clearInterruptFlag
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_A2_ReceiveHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EUSCIA3_IRQHandler</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, hardware_uart.o(i.EUSCIA3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EUSCIA3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_transmitData
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_clearInterruptFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EUSCIB0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, msp432_interrupt.o(i.EUSCIB0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>FlightPidControl</STRONG> (Thumb, 494 bytes, Stack size 16 bytes, control.o(i.FlightPidControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FlightPidControl &rArr; ClacCascadePID
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetPID
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClacCascadePID
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KernelPolling
</UL>

<P><STRONG><a name="[a7]"></a>FlyCtrlReset</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, program_ctrl.o(i.FlyCtrlReset))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Program_Ctrl_Task
</UL>

<P><STRONG><a name="[7b]"></a>Follow_Init</STRONG> (Thumb, 250 bytes, Stack size 8 bytes, task_base.o(i.Follow_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Follow_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hadrware_Init
</UL>

<P><STRONG><a name="[6c]"></a>GetAngle</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, imu.o(i.GetAngle))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = GetAngle &rArr; __hardfp_asin &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KernelPolling
</UL>

<P><STRONG><a name="[70]"></a>GetMPU6050Data</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, mpu6050.o(i.GetMPU6050Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = GetMPU6050Data &rArr; I2C_Read_Bytes &rArr; IIC_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KernelPolling
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMPU6050Offset
</UL>

<P><STRONG><a name="[72]"></a>GetMPU6050Offset</STRONG> (Thumb, 486 bytes, Stack size 56 bytes, mpu6050.o(i.GetMPU6050Offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = GetMPU6050Offset &rArr; GetMPU6050Data &rArr; I2C_Read_Bytes &rArr; IIC_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMPU6050Data
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050Init
</UL>

<P><STRONG><a name="[66]"></a>GetSysTime_us</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, timer_drv.o(i.GetSysTime_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetSysTime_us
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>

<P><STRONG><a name="[74]"></a>Hadrware_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, init.o(i.Hadrware_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = Hadrware_Init &rArr; SPL06Init &rArr; UpdateSPL06Info &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPL06Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050Init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDInit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Follow_Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MagnetInit
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEPInit
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, msp432_interrupt.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>Hardware_LED_Green_OFF</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hardware.o(i.Hardware_LED_Green_OFF))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollingLED
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDInit
</UL>

<P><STRONG><a name="[a3]"></a>Hardware_LED_Green_ON</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hardware.o(i.Hardware_LED_Green_ON))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollingLED
</UL>

<P><STRONG><a name="[a4]"></a>Hardware_LED_Green_TOGGLE</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hardware.o(i.Hardware_LED_Green_TOGGLE))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollingLED
</UL>

<P><STRONG><a name="[94]"></a>Hardware_LED_Red_OFF</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hardware.o(i.Hardware_LED_Red_OFF))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollingLED
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDInit
</UL>

<P><STRONG><a name="[a2]"></a>Hardware_LED_Red_ON</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hardware.o(i.Hardware_LED_Red_ON))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollingLED
</UL>

<P><STRONG><a name="[a1]"></a>Hardware_LED_Red_TOGGLE</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hardware.o(i.Hardware_LED_Red_TOGGLE))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollingLED
</UL>

<P><STRONG><a name="[7c]"></a>HoldCurrentPostion</STRONG> (Thumb, 266 bytes, Stack size 16 bytes, task_base.o(i.HoldCurrentPostion))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HoldCurrentPostion
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdatePID
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateAction
</UL>

<P><STRONG><a name="[9a]"></a>I2C_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hardware_i2c.o(i.I2C_Init))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_Init
</UL>

<P><STRONG><a name="[7d]"></a>I2C_Read_Byte</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, hardware_i2c.o(i.I2C_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_Read_Byte &rArr; IIC_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendByte
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendACK
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_RecvByte
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_RecvACK
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050Init
</UL>

<P><STRONG><a name="[71]"></a>I2C_Read_Bytes</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, hardware_i2c.o(i.I2C_Read_Bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = I2C_Read_Bytes &rArr; IIC_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendByte
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendACK
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_RecvByte
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_RecvACK
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SPL06_Temperature_Rate_Set
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SPL06_Pressure_Rate_Set
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SPL06_Get_Pressure_Adc
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SPL06_Get_Calib_Coef
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPL06Check
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMPU6050Data
</UL>

<P><STRONG><a name="[84]"></a>I2C_Write_Byte</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, hardware_i2c.o(i.I2C_Write_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_Write_Byte &rArr; IIC_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendByte
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_RecvACK
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SPL06_Temperature_Rate_Set
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SPL06_Set_And_Start_Measure
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SPL06_Pressure_Rate_Set
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050Init
</UL>

<P><STRONG><a name="[80]"></a>IIC_RecvACK</STRONG> (Thumb, 98 bytes, Stack size 4 bytes, hardware_i2c.o(i.IIC_RecvACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IIC_RecvACK &rArr; IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Byte
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Bytes
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Byte
</UL>

<P><STRONG><a name="[81]"></a>IIC_RecvByte</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, hardware_i2c.o(i.IIC_RecvByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IIC_RecvByte
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Bytes
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Byte
</UL>

<P><STRONG><a name="[82]"></a>IIC_SendACK</STRONG> (Thumb, 134 bytes, Stack size 4 bytes, hardware_i2c.o(i.IIC_SendACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IIC_SendACK
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Bytes
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Byte
</UL>

<P><STRONG><a name="[7f]"></a>IIC_SendByte</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, hardware_i2c.o(i.IIC_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IIC_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Byte
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Bytes
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Byte
</UL>

<P><STRONG><a name="[7e]"></a>IIC_Start</STRONG> (Thumb, 88 bytes, Stack size 4 bytes, hardware_i2c.o(i.IIC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IIC_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Byte
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Bytes
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Byte
</UL>

<P><STRONG><a name="[83]"></a>IIC_Stop</STRONG> (Thumb, 82 bytes, Stack size 4 bytes, hardware_i2c.o(i.IIC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_RecvACK
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Byte
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Bytes
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Byte
</UL>

<P><STRONG><a name="[6b]"></a>IMU_Reset</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, imu.o(i.IMU_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteUnlock
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorControl
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlightPidControl
</UL>

<P><STRONG><a name="[86]"></a>KernelPolling</STRONG> (Thumb, 288 bytes, Stack size 8 bytes, kernel.o(i.KernelPolling))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = KernelPolling &rArr; UpdateSPL06Info &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollingUSART
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAngle
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Update
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateSPL06Info
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMPU6050Data
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollingLED
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnoOF_State_Task
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WZ_Obs_Calcu
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WZ_Fix_Calcu
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WZ_Est_Calcu
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateCentControl
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Program_Ctrl_Task
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollingGCS
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POS_Ctrl
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;One_Key_Take_off_Land_Ctrl_Task
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALT_Ctrl
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorControl
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlightPidControl
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a5]"></a>LEDEventHandle</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, led.o(i.LEDEventHandle))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollingLED
</UL>

<P><STRONG><a name="[75]"></a>LEDInit</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, led.o(i.LEDInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LEDInit
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_LED_Red_OFF
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_LED_Green_OFF
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hadrware_Init
</UL>

<P><STRONG><a name="[96]"></a>MCU_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, hardware.o(i.MCU_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MCU_Init &rArr; USART_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Configuration
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[78]"></a>MPU6050Init</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, mpu6050.o(i.MPU6050Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = MPU6050Init &rArr; GetMPU6050Offset &rArr; GetMPU6050Data &rArr; I2C_Read_Bytes &rArr; IIC_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Byte
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Byte
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMPU6050Offset
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hadrware_Init
</UL>

<P><STRONG><a name="[77]"></a>MagnetInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, init.o(i.MagnetInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MagnetInit
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hadrware_Init
</UL>

<P><STRONG><a name="[88]"></a>MotorControl</STRONG> (Thumb, 822 bytes, Stack size 8 bytes, control.o(i.MotorControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = MotorControl &rArr; UpdateMotor &rArr; Timer_A_setCompareValue
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateMotor
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetPID
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Reset
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAlt
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KernelPolling
</UL>

<P><STRONG><a name="[99]"></a>Motor_Init</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, motor.o(i.Motor_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Motor_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_Init
</UL>

<P><STRONG><a name="[a8]"></a>One_Key_Land</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, program_ctrl.o(i.One_Key_Land))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Program_Ctrl_Task
</UL>

<P><STRONG><a name="[90]"></a>One_Key_Take_off_Land_Ctrl_Task</STRONG> (Thumb, 278 bytes, Stack size 0 bytes, program_ctrl.o(i.One_Key_Take_off_Land_Ctrl_Task))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KernelPolling
</UL>

<P><STRONG><a name="[9e]"></a>One_Key_Takeoff</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, program_ctrl.o(i.One_Key_Takeoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = One_Key_Takeoff
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FC_Unlock_Fun
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Program_Ctrl_Task
</UL>

<P><STRONG><a name="[7a]"></a>PID_Init</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, init.o(i.PID_Init))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hadrware_Init
</UL>

<P><STRONG><a name="[8f]"></a>POS_Ctrl</STRONG> (Thumb, 838 bytes, Stack size 0 bytes, pos_ctrl.o(i.POS_Ctrl))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KernelPolling
</UL>

<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, msp432_interrupt.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>PollingGCS</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, gcs.o(i.PollingGCS))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = PollingGCS &rArr; ANO_DT_Send_Senser
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_Status
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_Senser
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateUSBQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KernelPolling
</UL>

<P><STRONG><a name="[92]"></a>PollingLED</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, led.o(i.PollingLED))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PollingLED
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_LED_Red_TOGGLE
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_LED_Red_ON
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_LED_Red_OFF
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_LED_Green_TOGGLE
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_LED_Green_ON
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_LED_Green_OFF
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDEventHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KernelPolling
</UL>

<P><STRONG><a name="[93]"></a>PollingUSART</STRONG> (Thumb, 346 bytes, Stack size 16 bytes, hardware_uart.o(i.PollingUSART))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PollingUSART &rArr; deQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deQueue
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_transmitData
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KernelPolling
</UL>

<P><STRONG><a name="[91]"></a>Program_Ctrl_Task</STRONG> (Thumb, 1208 bytes, Stack size 8 bytes, program_ctrl.o(i.Program_Ctrl_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Program_Ctrl_Task &rArr; One_Key_Takeoff
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;One_Key_Takeoff
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;One_Key_Land
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlyCtrlReset
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KernelPolling
</UL>

<P><STRONG><a name="[59]"></a>Q_rsqrt</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, mymath.o(i.Q_rsqrt))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Update
</UL>

<P><STRONG><a name="[5c]"></a>RCReceiveHandle</STRONG> (Thumb, 340 bytes, Stack size 16 bytes, remote.o(i.RCReceiveHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCReceiveHandle &rArr; RemoteUnlock
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteUnlock
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyRC
</UL>

<P><STRONG><a name="[a9]"></a>RemoteUnlock</STRONG> (Thumb, 234 bytes, Stack size 8 bytes, remote.o(i.RemoteUnlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RemoteUnlock
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetPID
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCReceiveHandle
</UL>

<P><STRONG><a name="[9c]"></a>ResetAlt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, spl06.o(i.ResetAlt))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorControl
</UL>

<P><STRONG><a name="[6a]"></a>ResetPID</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, pid.o(i.ResetPID))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteUnlock
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorControl
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlightPidControl
</UL>

<P><STRONG><a name="[aa]"></a>SPL06Check</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, spl06.o(i.SPL06Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SPL06Check &rArr; I2C_Read_Bytes &rArr; IIC_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPL06Init
</UL>

<P><STRONG><a name="[79]"></a>SPL06Init</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, spl06.o(i.SPL06Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = SPL06Init &rArr; UpdateSPL06Info &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SPL06_Temperature_Rate_Set
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SPL06_Set_And_Start_Measure
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SPL06_Pressure_Rate_Set
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SPL06_Get_Calib_Coef
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateSPL06Info
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPL06Check
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hadrware_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spl06.o(i.SPL06Init)
</UL>
<P><STRONG><a name="[37]"></a>SPL06Update</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, spl06.o(i.SPL06Update))
<BR>[Address Reference Count : 1]<UL><LI> spl06.o(i.SPL06Init)
</UL>
<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, msp432_interrupt.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>SysTick_Configuration</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, timer_drv.o(i.SysTick_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SysTick_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_Init
</UL>

<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer_drv.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 522 bytes, Stack size 20 bytes, system_msp432p401r.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_Init
</UL>

<P><STRONG><a name="[35]"></a>SystemInit</STRONG> (Thumb, 186 bytes, Stack size 0 bytes, system_msp432p401r.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(.text)
</UL>
<P><STRONG><a name="[b8]"></a>Timer_A_setCompareValue</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, timer_a.o(i.Timer_A_setCompareValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Timer_A_setCompareValue
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateMotor
</UL>

<P><STRONG><a name="[38]"></a>UART_A0_ReceiveHandle</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, hardware_uart.o(i.UART_A0_ReceiveHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_A0_ReceiveHandle &rArr; ZKHD_Link_Handle &rArr; ZKHD_Link_GCS_To_FMU_Handle &rArr; gcs_ReceiveHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZKHD_Link_Handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardware_uart.o(i.USART_Init)
</UL>
<P><STRONG><a name="[39]"></a>UART_A1_ReceiveHandle</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, hardware_uart.o(i.UART_A1_ReceiveHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_A1_ReceiveHandle &rArr; ANO_DT_SendParame
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_SendParame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardware_uart.o(i.USART_Init)
</UL>
<P><STRONG><a name="[3a]"></a>UART_A2_ReceiveHandle</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, hardware_uart.o(i.UART_A2_ReceiveHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = UART_A2_ReceiveHandle &rArr; AnalyRC &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyRC
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EUSCIA2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardware_uart.o(i.USART_Init)
</UL>
<P><STRONG><a name="[3b]"></a>UART_A3_ReceiveHandle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hardware_uart.o(i.UART_A3_ReceiveHandle))
<BR>[Address Reference Count : 1]<UL><LI> hardware_uart.o(i.USART_Init)
</UL>
<P><STRONG><a name="[67]"></a>UART_clearInterruptFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart.o(i.UART_clearInterruptFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EUSCIA3_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EUSCIA2_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EUSCIA1_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EUSCIA0_IRQHandler
</UL>

<P><STRONG><a name="[68]"></a>UART_transmitData</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, uart.o(i.UART_transmitData))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollingUSART
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EUSCIA3_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EUSCIA1_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EUSCIA0_IRQHandler
</UL>

<P><STRONG><a name="[9b]"></a>USART_Init</STRONG> (Thumb, 448 bytes, Stack size 152 bytes, hardware_uart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = USART_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_Init
</UL>

<P><STRONG><a name="[b2]"></a>USART_TX</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, hardware_uart.o(i.USART_TX))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART_TX &rArr; enQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateAction
</UL>

<P><STRONG><a name="[b4]"></a>UpdateAction</STRONG> (Thumb, 1888 bytes, Stack size 120 bytes, task_base.o(i.UpdateAction))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = UpdateAction &rArr; USART_TX &rArr; enQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TX
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HoldCurrentPostion
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateCMD
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateCentControl
</UL>

<P><STRONG><a name="[b6]"></a>UpdateButton</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, task_base.o(i.UpdateButton))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateCentControl
</UL>

<P><STRONG><a name="[b5]"></a>UpdateCMD</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, program_ctrl.o(i.UpdateCMD))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateAction
</UL>

<P><STRONG><a name="[8a]"></a>UpdateCentControl</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, task_base.o(i.UpdateCentControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = UpdateCentControl &rArr; UpdateAction &rArr; USART_TX &rArr; enQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateStatus
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateButton
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateAction
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KernelPolling
</UL>

<P><STRONG><a name="[9d]"></a>UpdateMotor</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, motor.o(i.UpdateMotor))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = UpdateMotor &rArr; Timer_A_setCompareValue
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_A_setCompareValue
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorControl
</UL>

<P><STRONG><a name="[63]"></a>UpdatePID</STRONG> (Thumb, 406 bytes, Stack size 0 bytes, pid.o(i.UpdatePID))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClacCascadePID
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HoldCurrentPostion
</UL>

<P><STRONG><a name="[8b]"></a>UpdateSPL06Info</STRONG> (Thumb, 210 bytes, Stack size 96 bytes, spl06.o(i.UpdateSPL06Info))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = UpdateSPL06Info &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SPL06_Get_Pressure
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KernelPolling
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPL06Init
</UL>

<P><STRONG><a name="[b7]"></a>UpdateStatus</STRONG> (Thumb, 848 bytes, Stack size 4 bytes, task_base.o(i.UpdateStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UpdateStatus &rArr; ActionFormChange
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionHoldPoint_NoJudge
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionHoldPoint_Back
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionHoldPoint
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionFormChange
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateCentControl
</UL>

<P><STRONG><a name="[a0]"></a>UpdateUSBQueue</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gcs.o(i.UpdateUSBQueue))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollingGCS
</UL>

<P><STRONG><a name="[87]"></a>WZ_Est_Calcu</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, speed_estimator.o(i.WZ_Est_Calcu))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KernelPolling
</UL>

<P><STRONG><a name="[8d]"></a>WZ_Fix_Calcu</STRONG> (Thumb, 350 bytes, Stack size 4 bytes, speed_estimator.o(i.WZ_Fix_Calcu))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = WZ_Fix_Calcu
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WZ_Fus_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KernelPolling
</UL>

<P><STRONG><a name="[bf]"></a>WZ_Fus_Reset</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, speed_estimator.o(i.WZ_Fus_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WZ_Fix_Calcu
</UL>

<P><STRONG><a name="[8c]"></a>WZ_Obs_Calcu</STRONG> (Thumb, 328 bytes, Stack size 0 bytes, speed_estimator.o(i.WZ_Obs_Calcu))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KernelPolling
</UL>

<P><STRONG><a name="[c0]"></a>ZKHD_Link_GCS_To_FMU_Handle</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, zkhd_link.o(i.ZKHD_Link_GCS_To_FMU_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ZKHD_Link_GCS_To_FMU_Handle &rArr; gcs_ReceiveHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcs_ReceiveHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZKHD_Link_Handle
</UL>

<P><STRONG><a name="[c2]"></a>ZKHD_Link_GCS_To_Remote_Handle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, zkhd_link.o(i.ZKHD_Link_GCS_To_Remote_Handle))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZKHD_Link_Handle
</UL>

<P><STRONG><a name="[b0]"></a>ZKHD_Link_Handle</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, zkhd_link.o(i.ZKHD_Link_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ZKHD_Link_Handle &rArr; ZKHD_Link_GCS_To_FMU_Handle &rArr; gcs_ReceiveHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZKHD_Link_GCS_To_Remote_Handle
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZKHD_Link_GCS_To_FMU_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_A0_ReceiveHandle
</UL>

<P><STRONG><a name="[c3]"></a>__0sprintf$6</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf6.o(i.__0sprintf$6), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ed]"></a>__1sprintf$6</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf6.o(i.__0sprintf$6), UNUSED)

<P><STRONG><a name="[ab]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf6.o(i.__0sprintf$6))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPL06Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateAction
</UL>

<P><STRONG><a name="[c8]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[cd]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[6f]"></a>__hardfp_asin</STRONG> (Thumb, 770 bytes, Stack size 88 bytes, asin.o(i.__hardfp_asin))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __hardfp_asin &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAngle
</UL>

<P><STRONG><a name="[6d]"></a>__hardfp_atan2f</STRONG> (Thumb, 502 bytes, Stack size 16 bytes, atan2f.o(i.__hardfp_atan2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_atan2f
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAngle
</UL>

<P><STRONG><a name="[ba]"></a>__hardfp_pow</STRONG> (Thumb, 3044 bytes, Stack size 184 bytes, pow.o(i.__hardfp_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateSPL06Info
</UL>

<P><STRONG><a name="[ca]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[d1]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[c5]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[d0]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[c7]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[d2]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_overflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[c9]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[cf]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[ce]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[ee]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[ef]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[f0]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[c6]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[ac]"></a>bsp_SPL06_Get_Calib_Coef</STRONG> (Thumb, 482 bytes, Stack size 24 bytes, spl06.o(i.bsp_SPL06_Get_Calib_Coef))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = bsp_SPL06_Get_Calib_Coef &rArr; I2C_Read_Bytes &rArr; IIC_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPL06Init
</UL>

<P><STRONG><a name="[b9]"></a>bsp_SPL06_Get_Pressure</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, spl06.o(i.bsp_SPL06_Get_Pressure))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = bsp_SPL06_Get_Pressure &rArr; bsp_SPL06_Get_Pressure_Adc &rArr; I2C_Read_Bytes &rArr; IIC_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SPL06_Get_Pressure_Adc
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateSPL06Info
</UL>

<P><STRONG><a name="[d8]"></a>bsp_SPL06_Get_Pressure_Adc</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, spl06.o(i.bsp_SPL06_Get_Pressure_Adc))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = bsp_SPL06_Get_Pressure_Adc &rArr; I2C_Read_Bytes &rArr; IIC_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SPL06_Get_Pressure
</UL>

<P><STRONG><a name="[ad]"></a>bsp_SPL06_Pressure_Rate_Set</STRONG> (Thumb, 362 bytes, Stack size 24 bytes, spl06.o(i.bsp_SPL06_Pressure_Rate_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = bsp_SPL06_Pressure_Rate_Set &rArr; I2C_Read_Bytes &rArr; IIC_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Byte
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPL06Init
</UL>

<P><STRONG><a name="[af]"></a>bsp_SPL06_Set_And_Start_Measure</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, spl06.o(i.bsp_SPL06_Set_And_Start_Measure))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bsp_SPL06_Set_And_Start_Measure &rArr; I2C_Write_Byte &rArr; IIC_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPL06Init
</UL>

<P><STRONG><a name="[ae]"></a>bsp_SPL06_Temperature_Rate_Set</STRONG> (Thumb, 378 bytes, Stack size 32 bytes, spl06.o(i.bsp_SPL06_Temperature_Rate_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = bsp_SPL06_Temperature_Rate_Set &rArr; I2C_Read_Bytes &rArr; IIC_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Byte
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPL06Init
</UL>

<P><STRONG><a name="[a6]"></a>deQueue</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, queue.o(i.deQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = deQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollingUSART
</UL>

<P><STRONG><a name="[85]"></a>delay</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hardware_i2c.o(i.delay))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendByte
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendACK
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_RecvByte
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_RecvACK
</UL>

<P><STRONG><a name="[b3]"></a>enQueue</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, queue.o(i.enQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = enQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TX
</UL>

<P><STRONG><a name="[cb]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[c1]"></a>gcs_ReceiveHandle</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, gcs.o(i.gcs_ReceiveHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gcs_ReceiveHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZKHD_Link_GCS_To_FMU_Handle
</UL>

<P><STRONG><a name="[34]"></a>main</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = main &rArr; Hadrware_Init &rArr; SPL06Init &rArr; UpdateSPL06Info &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KernelPolling
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hadrware_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[cc]"></a>sqrt</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[5d]"></a>AnoOF_Check</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, ano_of.o(i.AnoOF_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AnoOF_Check
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnoOF_State_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnoOF_State_Task
</UL>

<P><STRONG><a name="[5e]"></a>AnoOF_State_Get</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ano_of.o(i.AnoOF_State_Get))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnoOF_DataAnl
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnoOF_Check
</UL>

<P><STRONG><a name="[9f]"></a>FC_Unlock_Fun</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, program_ctrl.o(i.FC_Unlock_Fun))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;One_Key_Takeoff
</UL>

<P><STRONG><a name="[c4]"></a>_printf_core</STRONG> (Thumb, 748 bytes, Stack size 96 bytes, printf6.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$6
</UL>

<P><STRONG><a name="[d7]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf6.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[d5]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf6.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3c]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf6.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$6
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf6.o(i.__0sprintf$6)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
